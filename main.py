import json
import asyncio
import logging
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.types import BotCommand, BotCommandScopeDefault
from dotenv import load_dotenv

from aiogram.client.bot import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))
THREAD_ID = int(os.getenv("THREAD_ID", "0"))
OWNER_ID = int(os.getenv("OWNER_ID"))  # –¢–≤–æ–π Telegram ID ‚Äî —Ç–æ–ª—å–∫–æ —Ç—ã –º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å –∞–¥–º–∏–Ω–æ–≤

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    session=AiohttpSession()
)

dp = Dispatcher()
scheduler = AsyncIOScheduler()
DATA_FILE = "data.json"

# --- –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ---
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"admins": [], "events": []}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def is_admin(user_id: int) -> bool:
    return user_id in load_data().get("admins", [])

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def main_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å"))
    kb.add(KeyboardButton(text="üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
    kb.add(KeyboardButton(text="üìÜ –°–µ–≥–æ–¥–Ω—è"))
    kb.add(KeyboardButton(text="üóì –ù–µ–¥–µ–ª—è"))
    kb.add(KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"))
    return kb.as_markup(resize_keyboard=True)

def back_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"))
    return kb.as_markup(resize_keyboard=True)

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã ---
def format_date_ddmmyyyy(date_str_iso: str) -> str:
    try:
        dt = datetime.strptime(date_str_iso, "%Y-%m-%d")
        return dt.strftime("%d.%m.%Y")
    except Exception:
        return date_str_iso

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def safe_send_message(chat_id, text, thread_id=None):
    try:
        if thread_id and thread_id != 0:
            await bot.send_message(chat_id=chat_id, message_thread_id=thread_id, text=text)
        else:
            await bot.send_message(chat_id=chat_id, text=text)
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ —Å thread_id={thread_id}: {e}")
        try:
            await bot.send_message(chat_id=chat_id, text=text)
        except Exception as e2:
            logging.error(f"–û—à–∏–±–∫–∞ –±–µ–∑ thread_id: {e2}")

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!", reply_markup=main_keyboard())

@dp.message(Command("help"))
@dp.message(F.text.lower() == "‚ùì –ø–æ–º–æ—â—å")
async def cmd_help(message: Message):
    await message.answer(
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/add ‚Äî –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "/list ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/today ‚Äî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/week ‚Äî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "/getthreadid ‚Äî –£–∑–Ω–∞—Ç—å ID —Ç–µ–º—ã\n"
        "/addadmin &lt;user_id&gt; ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/removeadmin &lt;user_id&gt; ‚Äî –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)",
        reply_markup=main_keyboard()
    )

@dp.message(Command("getthreadid"))
async def get_thread_id(message: Message):
    info = (
        f"<b>chat_id</b>: <code>{message.chat.id}</code>\n"
        f"<b>thread_id</b>: <code>{message.message_thread_id or '‚Äî'}</code>\n"
        f"<b>user_id</b>: <code>{message.from_user.id}</code>"
    )
    await message.answer(info)

@dp.message(Command("today"))
async def cmd_today(message: Message):
    await send_today_schedule(message.chat.id, message.message_thread_id)

@dp.message(Command("week"))
async def cmd_week(message: Message):
    await send_weekly_schedule(message.chat.id, message.message_thread_id)

@dp.message(Command("addadmin"))
async def cmd_add_admin(message: Message):
    if message.from_user.id != OWNER_ID:
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <user_id>")
    user_id = int(args[1])
    data = load_data()
    admins = data.get("admins", [])
    if user_id in admins:
        return await message.answer("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
    admins.append(user_id)
    data["admins"] = admins
    save_data(data)
    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã."
    )

@dp.message(Command("removeadmin"))
async def cmd_remove_admin(message: Message):
    if message.from_user.id != OWNER_ID:
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeadmin <user_id>")
    user_id = int(args[1])
    data = load_data()
    admins = data.get("admins", [])
    if user_id not in admins:
        return await message.answer("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
    admins.remove(user_id)
    data["admins"] = admins
    save_data(data)
    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤."
    )

# --- –ö–Ω–æ–ø–∫–∏ ---
@dp.message(F.text.lower() == "üìÜ —Å–µ–≥–æ–¥–Ω—è")
async def btn_today(message: Message):
    await send_today_schedule(message.chat.id, message.message_thread_id)

@dp.message(F.text.lower() == "üóì –Ω–µ–¥–µ–ª—è")
async def btn_week(message: Message):
    await send_weekly_schedule(message.chat.id, message.message_thread_id)

@dp.message(F.text.lower() == "‚ûï –¥–æ–±–∞–≤–∏—Ç—å")
async def add_event_start(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π.")
    await message.answer(
        "üì• –í–≤–µ–¥–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç—Ä–µ–Ω–µ—Ä\n"
        "–î–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
        "–í—Ä–µ–º—è (–ß–ß:–ú–ú)\n"
        "–ú–µ—Å—Ç–æ\n"
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        reply_markup=back_keyboard()
    )

@dp.message(F.text.lower() == "üìã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
@dp.message(Command("list"))
async def show_list(message: Message):
    data = load_data()
    events = data.get("events", [])
    if not events:
        return await message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç.")

    text_lines = []
    builder = InlineKeyboardBuilder()

    for i, e in enumerate(events):
        text_lines.append(
            f"<b>{i+1}.</b> {e['title']}\n"
            f"üóì {format_date_ddmmyyyy(e['date'])} {e['time']}\n"
            f"üìç {e['location']}\nüìù {e['comment'] or '-'}"
        )
        if is_admin(message.from_user.id):
            builder.button(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {i+1}", callback_data=f"remove_{i}")

    await message.answer("\n\n".join(text_lines), reply_markup=builder.as_markup())

@dp.message(F.text.lower() == "‚¨Ö –Ω–∞–∑–∞–¥")
async def go_back(message: Message):
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=main_keyboard())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–±—ã—Ç–∏—è ---
@dp.message()
async def handle_event_input(message: Message):
    if not is_admin(message.from_user.id):
        return

    lines = message.text.strip().split("\n")
    if len(lines) < 4:
        return

    title, date_str_input, time_str, location = lines[:4]
    comment = "\n".join(lines[4:]) if len(lines) > 4 else ""

    try:
        dt = datetime.strptime(date_str_input.strip(), "%d.%m.%Y")
        date_str = dt.strftime("%Y-%m-%d")
        datetime.strptime(time_str.strip(), "%H:%M")
    except ValueError:
        return await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.")

    data = load_data()
    data["events"].append({
        "title": title.strip(),
        "date": date_str,
        "time": time_str.strip(),
        "location": location.strip(),
        "comment": comment.strip()
    })
    save_data(data)
    await message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=main_keyboard())

# --- –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ---
@dp.callback_query(F.data.startswith("remove_"))
async def remove_event(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)

    index = int(callback.data.split("_")[-1])
    data = load_data()
    events = data.get("events", [])
    if 0 <= index < len(events):
        removed = events.pop(index)
        save_data(data)
        await callback.message.edit_text(
            f"üóë –£–¥–∞–ª–µ–Ω–æ: <b>{removed['title']}</b> ‚Äî {format_date_ddmmyyyy(removed['date'])} {removed['time']}"
        )
    else:
        await callback.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–æ–∫ ---
async def send_today_schedule(chat_id, thread_id=None):
    data = load_data()
    today_str = datetime.now().strftime("%Y-%m-%d")
    events = [e for e in data["events"] if e["date"] == today_str]

    text = "<b>–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.</b>" if not events else "<b>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</b>\n\n" + "\n\n".join(
        f"<b>{e['title']}</b>\nüïí {e['time']}\nüìç {e['location']}\nüìù {e['comment'] or '-'}" for e in events
    )

    await safe_send_message(chat_id, text, thread_id or THREAD_ID)

async def send_weekly_schedule(chat_id, thread_id=None):
    data = load_data()
    today = datetime.now()
    week_end = today + timedelta(days=7)
    weekly_events = [
        e for e in data["events"]
        if today <= datetime.strptime(e["date"], "%Y-%m-%d") < week_end
    ]

    text = "<b>–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç üò¥</b>" if not weekly_events else "<b>–°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>\n\n" + "\n\n".join(
        f"<b>{e['title']}</b> ‚Äî {format_date_ddmmyyyy(e['date'])} {e['time']}\nüìç {e['location']}\nüìù {e['comment'] or '-'}"
        for e in sorted(weekly_events, key=lambda x: (x["date"], x["time"]))
    )

    await safe_send_message(chat_id, text, thread_id or THREAD_ID)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    logging.basicConfig(level=logging.INFO)

    # –ê–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ (—á—Ç–æ–±—ã –≤ Telegram –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∏)
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã"),
        BotCommand(command="add", description="–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
        BotCommand(command="list", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
        BotCommand(command="today", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
        BotCommand(command="week", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"),
        BotCommand(command="getthreadid", description="–£–∑–Ω–∞—Ç—å ID —Ç–µ–º—ã"),
        BotCommand(command="addadmin", description="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"),
        BotCommand(command="removeadmin", description="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"),
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π
    scheduler.add_job(send_weekly_schedule, "cron", day_of_week="sun", hour=22, minute=0, args=[GROUP_ID, THREAD_ID])
    scheduler.add_job(send_today_schedule, "cron", hour=7, minute=0, args=[GROUP_ID, THREAD_ID])
    scheduler.add_job(send_weekly_schedule, "cron", hour=15, minute=20, args=[GROUP_ID, THREAD_ID])  # –ø—Ä–æ–±–Ω–æ–µ
    scheduler.add_job(send_today_schedule, "cron", hour=15, minute=25, args=[GROUP_ID, THREAD_ID])   # –ø—Ä–æ–±–Ω–æ–µ
    scheduler.start()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
